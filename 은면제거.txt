구면좌표계 카메라 위치
: 반지름이 r인 구면 위에 위치 -> x = r * cos(phi) * cos(theta);  y = r * cos(phi) * sin(theta);  z = r * sin(phi);
gluLookAt(x, y, z, 0, 0, 0, 0, 0, 1);

직교 투상 : gluOrtho2D(좌 세로 클리핑 평면, 우 세로 클리핑 평면, 하 가로 클리핑 평면, 상 가로 클리핑 평면)

< 은면 제거법 >
: 보이지 않는 면을 제거하기 위한 작업은 순서대로 진행됨.

object-space approaches(물체 공간법)
: 물체를 정의한 단계에서 적용하는 알고리즘
: 3D에서 면 간의 순서를 부여
: 페인터 알고리즘

image-space approaches(이미지 공간법)
: 픽셀마다 보이는 물체를 찾음
: z-buffer 알고리즘

1. Z-buffer 알고리즘
: 화소 단위로 은면을 판단함
: Z-buffer 알고리즘은 픽셀마다 하나의 광선을 발사하여 물체마다 픽셀의 z값을 계산해서 z값이 가까운 물체 픽셀로 색 채움
: z-buffer의 용량이 커질수록 정밀도도 커지게 됨
glutInitDisplay(GLUT_DEPTH) 함수를 호출하여 새로 만들어지는 윈도우에서 깊이 버퍼 모드를 사용할 수 있도록 초기화.
glEnable(GL_DEPTH_TEST);
: 화소 하나마다 (r,g,b,z)로 z 좌표를 저장해야하므로 메모리가 많이 필요함


2. 페인터 알고리즘
: 모든 물체를 카메라에서 먼 것부터 정렬함
: 카메라 좌표계에서 정렬
: 멀리 있는 물체부터 그림
: 가려진 부분은 자동적으로 지워짐
: 깊이 정렬이 필요함
: Zmax를 기준으로 물체를 정렬함
: 순서대로 정렬할 수 없는 경우도 발생함
: 해결책으로 물체를 2개 이상으로 분리시키는 방법이 있음
: 물체공간 알고리즘으로 정밀도는 높지만 실행속도가 느리고 경우에 따라 처리가 매우 복잡함


































